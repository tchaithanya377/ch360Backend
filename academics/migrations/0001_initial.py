# Generated by Django 5.2.5 on 2025-09-03 04:56

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('faculty', '0002_customfield_alter_faculty_options_and_more'),
        ('students', '0004_studentimport'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicCalendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Event title', max_length=200)),
                ('event_type', models.CharField(choices=[('HOLIDAY', 'Holiday'), ('EXAM', 'Examination'), ('BREAK', 'Break'), ('EVENT', 'Special Event'), ('DEADLINE', 'Deadline'), ('OTHER', 'Other')], max_length=20)),
                ('start_date', models.DateField(help_text='Event start date')),
                ('end_date', models.DateField(help_text='Event end date')),
                ('description', models.TextField(help_text='Event description')),
                ('academic_year', models.CharField(help_text='Academic year', max_length=9)),
                ('semester', models.CharField(help_text='Semester (if applicable)', max_length=20)),
                ('is_academic_day', models.BooleanField(default=True, help_text='Whether this is an academic day')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['start_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Course code (e.g., CS101)', max_length=20, unique=True)),
                ('title', models.CharField(help_text='Course title', max_length=200)),
                ('description', models.TextField(help_text='Course description')),
                ('level', models.CharField(choices=[('UG', 'Undergraduate'), ('PG', 'Postgraduate'), ('PHD', 'Doctorate'), ('DIPLOMA', 'Diploma'), ('CERTIFICATE', 'Certificate')], default='UG', max_length=20)),
                ('credits', models.PositiveIntegerField(default=3, help_text='Credit hours')),
                ('duration_weeks', models.PositiveIntegerField(default=16, help_text='Duration in weeks')),
                ('max_students', models.PositiveIntegerField(default=50, help_text='Maximum number of students')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('DRAFT', 'Draft'), ('ARCHIVED', 'Archived')], default='ACTIVE', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('faculty', models.ManyToManyField(help_text='Faculty teaching this course', related_name='courses', to='faculty.faculty')),
                ('prerequisites', models.ManyToManyField(blank=True, help_text='Prerequisite courses', to='academics.course')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['code', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Syllabus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(default='1.0', help_text='Syllabus version', max_length=20)),
                ('academic_year', models.CharField(help_text='Academic year (e.g., 2024-2025)', max_length=9)),
                ('semester', models.CharField(help_text='Semester (e.g., Fall, Spring)', max_length=20)),
                ('learning_objectives', models.TextField(help_text='Course learning objectives')),
                ('course_outline', models.TextField(help_text='Detailed course outline')),
                ('assessment_methods', models.TextField(help_text='Assessment and evaluation methods')),
                ('grading_policy', models.TextField(help_text='Grading policy and criteria')),
                ('textbooks', models.TextField(help_text='Required and recommended textbooks')),
                ('additional_resources', models.TextField(blank=True, help_text='Additional learning resources')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('ACTIVE', 'Active'), ('ARCHIVED', 'Archived')], default='DRAFT', max_length=20)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_syllabi', to=settings.AUTH_USER_MODEL)),
                ('course', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='syllabus', to='academics.course')),
            ],
            options={
                'verbose_name': 'Syllabus',
                'verbose_name_plural': 'Syllabi',
                'ordering': ['-academic_year', '-semester', 'course__code'],
            },
        ),
        migrations.CreateModel(
            name='CourseEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.CharField(help_text='Academic year', max_length=9)),
                ('semester', models.CharField(help_text='Semester', max_length=20)),
                ('enrollment_date', models.DateField(auto_now_add=True)),
                ('status', models.CharField(choices=[('ENROLLED', 'Enrolled'), ('DROPPED', 'Dropped'), ('COMPLETED', 'Completed'), ('WITHDRAWN', 'Withdrawn')], default='ENROLLED', max_length=20)),
                ('grade', models.CharField(blank=True, help_text='Final grade (e.g., A, B+, C)', max_length=5)),
                ('grade_points', models.DecimalField(blank=True, decimal_places=2, help_text='Grade points', max_digits=3, null=True)),
                ('attendance_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Attendance percentage', max_digits=5, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='academics.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='students.student')),
            ],
            options={
                'ordering': ['-academic_year', '-semester', 'course__code'],
                'unique_together': {('student', 'course', 'academic_year', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='SyllabusTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_number', models.PositiveIntegerField(help_text='Week number in the semester')),
                ('title', models.CharField(help_text='Topic title', max_length=200)),
                ('description', models.TextField(help_text='Topic description')),
                ('learning_outcomes', models.TextField(help_text='Specific learning outcomes for this topic')),
                ('readings', models.TextField(blank=True, help_text='Required readings for this topic')),
                ('activities', models.TextField(blank=True, help_text='Learning activities and assignments')),
                ('duration_hours', models.PositiveIntegerField(default=3, help_text='Duration in hours')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order within the week')),
                ('syllabus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='academics.syllabus')),
            ],
            options={
                'ordering': ['week_number', 'order'],
                'unique_together': {('syllabus', 'week_number', 'order')},
            },
        ),
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timetable_type', models.CharField(choices=[('REGULAR', 'Regular Schedule'), ('EXAM', 'Examination Schedule'), ('MAKEUP', 'Make-up Classes'), ('SPECIAL', 'Special Events')], default='REGULAR', max_length=20)),
                ('academic_year', models.CharField(help_text='Academic year', max_length=9)),
                ('semester', models.CharField(help_text='Semester', max_length=20)),
                ('day_of_week', models.CharField(choices=[('MON', 'Monday'), ('TUE', 'Tuesday'), ('WED', 'Wednesday'), ('THU', 'Thursday'), ('FRI', 'Friday'), ('SAT', 'Saturday'), ('SUN', 'Sunday')], max_length=3)),
                ('start_time', models.TimeField(help_text='Class start time')),
                ('end_time', models.TimeField(help_text='Class end time')),
                ('room', models.CharField(help_text='Classroom or venue', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this timetable entry is active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='academics.course')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='faculty.faculty')),
            ],
            options={
                'ordering': ['day_of_week', 'start_time'],
                'unique_together': {('course', 'day_of_week', 'start_time', 'academic_year', 'semester')},
            },
        ),
    ]
